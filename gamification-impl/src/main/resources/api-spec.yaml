openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: description
security:
  - apiKeyAuth: []
paths:
  /applications:
    post:
      description: create a new application
      operationId: createApplication
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewApplication'
      responses:
        '201':
          description: new application created
          content:
            'application/json':
              schema:
                type: string
  /applications/{name}:
    get:
      description: get one application, by name
      operationId: getApplication
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: if application name is unknown
  /badges:
    post:
      description: create badge for the website
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                type: string
        '400':
          description: parameters are empty or null
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '409':
          description: badge already exists
    get:
      description: get the list of all badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /badges/{name}:
    get:
      description: get one badge, by name
      operationId: getBadge
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: badge not found
    put:
      description: update a badge, by name
      operationId: putBadge
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
        - in: query
          name: usable
          schema:
            type: boolean
            default: true
          description: if the badge has to be desactivated pass this value with false
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
        description: pass an empty body if you would like to only modify the usable value
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
        '400':
          description: request body was incorrect
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '409':
          description: badge's name conflict

    delete:
      description: delete the specified badge
      operationId: removeBadge
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Badge Removed
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Badge not found
  /events:
    post:
      description: create a user event
      operationId: createEvent
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                type: string
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    get:
      description: get the list of all events
      operationId: getEvents
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventInfo'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /events/{id}:
    get:
      description: get one event, by id
      operationId: getEvent
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Event not found
  /rules:
    post:
      description: create a new rule
      operationId: createRule
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
      responses:
        '201':
          description: New rule created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          description: Missing important fields
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: If badge name sent is not known or unusable
        '409':
          description: Rule duplication (same API-KEY, event type and pointscale id)
    get:
      description: get the list of all rules
      operationId: getRules
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleInfo'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /rules/{id}:
    get:
      description: get one rules, by id
      operationId: getRule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Rule'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Rule not found
    delete:
      description: delete the specified rule
      operationId: removeRule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: rule removed
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: rule not found
  /users:
    get:
      description: get the list of all users
      operationId: getUsers
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: user not found
  /users/{userAppId}:
    get:
      description: get one user, by userAppId
      operationId: getUser
      parameters:
        - in: path
          name: userAppId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /pointscales:
    post:
      description: create a pointscale
      operationId: createPointScale
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PointScale'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                type: string
        '400':
          description: request body was incorrect
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: usable badge not found
    get:
      description: get the list of all pointscales
      operationId: getPointScales
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScaleInfo'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /pointscales/{id}:
    get:
      description: get one pointscale, by id
      operationId: getPointScale
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScale'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: pointscale not found
    delete:
      description: delete the specified pointscale
      operationId: removePointScale
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: pointscale Removed
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: pointscale not found
  /statistics/{userAppId}/progression:
    get:
      description: get the user progression by overall points
      operationId: getUserOverallProgression
      parameters:
        - in: path
          name: userAppId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointsProgression'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: user not found
  /statistics/{userAppId}/progression/{pointScaleId}:
    get:
      description: get the user progression by overall points
      operationId: getUserProgressionByPointScale
      parameters:
        - in: path
          name: userAppId
          schema:
            type: string
          required: true
        - in: path
          name: pointScaleId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointsProgression'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: user or/and pointscale not found
  /rankings/byBadges:
    get:
      description: get the user rankings by total number of badges
      operationId: getRankingsByTotalBadges
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            default: 10
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PaginatedBadgesRankings'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /rankings/byPoints:
    get:
      description: get the user rankings by total number of points
      operationId: getRankingsByTotalPoints
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            default: 10
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PaginatedPointsRankings'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /rankings/byPoints/eventType/{eventType}:
    get:
      description: get the user rankings by points for a type of event
      operationId: getRankingsByEventTypePoints
      parameters:
        - in: path
          name: eventType
          schema:
            type: string
          required: true
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            default: 10
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PaginatedPointsRankings'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /rankings/byPoints/pointscales/{id}:
    get:
      description: get the user rankings by points for a pointscale
      operationId: getRankingsByPointScalesPoints
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            default: 10
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PaginatedPointsRankings'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: pointscale not found
components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  parameters:
    ApiKey:
      description: "Application api key"
      name: "X-API-KEY"
      in: header
      required: true
      schema:
        type: string
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    Event:
      type: object
      properties:
        userAppId:
          type: string
        timestamp:
          type: string
          format: date-time
        eventType:
          type: string
        eventProperties:
          type: object
    EventInfo:
      type: object
      properties:
        id:
          type: integer
        userAppId:
          type: string
        timestamp:
          type: string
          format: date-time
        eventType:
          type: string
    Badge:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    NewApplication:
      type: object
      properties:
        name:
          type: string
    Application:
      type: object
      properties:
        apiKey:
          type: string
        name:
          type: string
    Rule:
      type: object
      required:
        - name
        - description
        - eventType
        - pointsToAdd
        - pointScaleId
      properties:
        name:
          type: string
        description:
          type: string
        eventType:
          type: string
        pointsToAdd:
          type: number
          format: double
        badgeName:
          type: string
        pointScaleId:
          type: integer
    RuleInfo:
      type: object
      required:
        - id
        - name
        - description
        - eventType
        - pointsToAdd
        - pointScaleId
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        eventType:
          type: string
        pointsToAdd:
          type: number
          format: double
        badgeName:
          type: string
        pointScaleId:
          type: integer
    User:
      type: object
      properties:
        userAppId:
          type: string
        points:
          type: integer
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
    UserInfo:
      type: object
      properties:
        points:
          type: integer
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
    PointScaleInfo:
      type: object
      required:
        - id
        - stages
      properties:
        id:
          type: integer
        stages:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
    PointScale:
      type: object
      required:
        - stages
      properties:
        stages:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
    Stage:
      type: object
      required:
        - points
        - badge
      properties:
        points:
          type: number
          format: double
        badge:
          $ref: '#/components/schemas/Badge'
    PaginatedPointsRankings:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        data:
          type: array
          items:
            $ref: '#/components/schemas/PointsRanking'
    PaginatedBadgesRankings:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        data:
          type: array
          items:
            $ref: '#/components/schemas/BadgesRanking'
    PointsRanking:
      type: object
      properties:
        userId:
          type: string
        points:
          type: number
          format: double
    BadgesRanking:
      type: object
      properties:
        userId:
          type: string
        points:
          type: int
    Pagination:
      type: object
      required:
        - numberOfItems
        - page
      properties:
        numberOfItems:
          type: integer
          format: int64
        page:
          type: integer
        previous:
          type: string
        next:
          type: string
    PointsProgression:
      type: object
      properties:
        userAppId:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/PointsProgressionData'
    PointsProgressionData:
      type: object
      properties:
        points:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        eventType:
          type: string
